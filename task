Задача 3 на оценку до 100 баллов
Реализовать консольную программу JCL (Java Command Line), которая представляет реализацию командной строки, то есть могла бы выполнять команды вводимые пользователем.
Описание
Программа должна предоставлять возможность простого добавления любых команд.
Под командой понимается следующая строка:

"имя команды" "аргумент №1" "аргумент №2" ... "аргумент №N"

Код, который выполняет необходимую команду пользователя, должен оформляться как отдельный Java класс. Для этого используйте паттерн команда.

Команда во время выполнения может также взаимодействовать с пользователем используя стандартный ввод/вывод.

Программа должна поддерживать следующие команды:

dir — выводит список файлов в текущей директории
cd «путь» — перейти в директорию, путь к которой задан первым аргументом
pwd — вывести полный путь до текущей директории
cat «имя_файла» - выводит содержимое текстового файла «имя_файла»
help - выводит список всех команд поддерживаемых оболочкой
exit - выход
Детали реализации
Для вывода содержимого директории воспользуемся классом java.io.File (https://docs.oracle.com/javase/7/docs/api/java/io/File.html):

Пример вывода содержимого текущей директории:

        File dir = new File(".");
        for(File f: dir.listFiles()) {
            System.out.println(f.getName());
        }

Пример вывода содержимого диска c:

       File dir = new File("c:\\");
       for(File f: dir.listFiles()) {
            System.out.println(f.getName());
        }

Для считывания содержимого файла можно воспользоваться классом Scanner:

	Scanner scanner = new Scanner(new File("filename.txt"));
	while(scanner.hasNextLine()) {
		System.out.println(scanner.nextLine());
	}

После запуска программа отображает приглашение в виде символа >  после которого пользователь вводит команду и дополнительные аргументы (если нужно).
Ответ оболочки на команду выводится без символа > (см. пример работы программы ниже).
Если команда введена верно, то выполняется соответствующее действие, если нет - выводится сообщение об отсутствии команды.
Если команда выполняется только с обязательными аргументами, но они не были указан, то выдается соответствующее сообщение об отсутствии нужных аргументов.
Работа программы должна продолжаться до тех пор, пока не будет введена команда exit.
Пример работы программы
> test
Команда test не поддерживается
> pwd
c:\users\student\Desktop\exam
> dir
.idea
src
target
.gitignore
pom.xml
README.md
> cd
Для команды cd необходимо указать директорию для перехода
> cd src
> pwd
c:\users\student\Desktop\exam\src
> dir
org
> help
Командная оболочка Java Command Line
Список поддерживаемых команд:
dir — выводит список файлов в текущей директории
cd “путь” — перейти в директорию, путь к которой задан первым аргументом
pwd — вывести полный путь до текущей директории
cat «имя_файла» - выводит содержимое текстового файла «имя_файла»
help - выводит эту справку
exit - выход
> cd c:\users\student\Desktop\exam\target
> pwd
c:\users\student\Desktop\exam\target
> dir
classes
generated-source
> cd c:\users\student\Desktop\exam
> cat README.md
# Экзаменационное задание по ООП

> exit
Критерии оценки
60 баллов - программа успешно компилируется, после запуска пользователь может вводить команды до тех пор, пока не введет exit. Корректно работают команды dir, pwd и exit.
10 баллов - корректно работают команды cd и pwd.
10 баллов - корректно применен паттерн команда.
5 баллов - корректно работает команда cat и help.
5 баллов - программа написана с учетом общепринятых правил кодирования. Код отформатирован. Выполняются требования по именованию классов, методов, полей и локальных переменных. Классы находятся в соответствующих пакетах. Применяются принципы ООП: инкапсуляция, наследование и полиморфизм.
5 баллов - программа корректно работает в случае некорректного ввода имени файла и/или директории
5 баллов - в коде отсутствуют магические числа.